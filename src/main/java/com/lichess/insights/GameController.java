package com.lichess.insights;

import static java.util.Map.Entry;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.stream.Collectors;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/games") // This means URL's start with /demo (after Application path)
public class GameController {
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private GameRepository gameRepository;

	@Value("${spring.datasource.url}")
	private String dbUrl;


	@GetMapping(path = "/all")
	public @ResponseBody Iterable<Game> getAllGames(
			@RequestParam(defaultValue = "0") int page,
			@RequestParam(defaultValue = "10") int size
	) {
		// This returns a JSON or XML with the users
		return gameRepository.findAll(PageRequest.of(page, size, Sort.by("utcDate").ascending()));
	}

	@GetMapping(path = "/test")
	public @ResponseBody GamesStats getRecord() {
		List<Game> games = gameRepository.findAll();

		long gamesWithWhite = games.stream().filter(game -> game.getWhite().equals("bodya17")).count();
		long lostWithWhite = games.stream().filter(game -> game.getWhite().equals("bodya17") && game.getResult().equals("0-1")).count();
		double whiteLostPercentage = (double) lostWithWhite / gamesWithWhite;

		long gamesWithBlack = games.stream().filter(game -> game.getBlack().equals("bodya17")).count();
		long lostWithBlack = games.stream().filter(game -> game.getBlack().equals("bodya17") && game.getResult().equals("1-0")).count();
		double blackLostPercentage = (double) lostWithBlack / gamesWithBlack;
		return new GamesStats(gamesWithWhite, lostWithWhite, whiteLostPercentage, gamesWithBlack, lostWithBlack, blackLostPercentage);
//		Game game = new Game();
//		game.setBlackElo("2400");
//		return gameRepository.findAll(Example.of(game));
	}

	;

	@CrossOrigin(origins = "*")
	@GetMapping(path = "/calendar")
	public @ResponseBody List<DataPoint> getCalendar() {
		List<Game> games = gameRepository.findAll();
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");

		return games.stream()
				.collect(Collectors.groupingBy(game -> dateFormat.format(game.getDate()), Collectors.counting()))
				.entrySet()
				.stream()
				.sorted(Entry.comparingByKey())
				.collect(Collectors.toMap(
						Entry::getKey,
						Entry::getValue,
						(oldValue, newValue) -> oldValue,
						LinkedHashMap::new)).entrySet().stream().map(e -> {
					try {
						return new DataPoint(
						e.getKey(),
						e.getValue().intValue(),
						String.format("https://lichess.org/games/search?players.a=bodya17&dateMin=%s&dateMax=%s&sort.field=d&sort.order=desc#results", e.getKey(), getNextDate(e.getKey()))
				);
					} catch (ParseException ex) {
						throw new RuntimeException(ex);
					}
				}).collect(Collectors.toList());
	}

	@GetMapping(path = "/count")
	public @ResponseBody long getAllGames2() {
		// This returns a JSON or XML with the users
		return gameRepository.count();
	}

	@GetMapping(path = "/prop-value")
	public @ResponseBody String getDbUrl() {
		// This returns a JSON or XML with the users
		return dbUrl;
	}

	public static String getNextDate(String  curDate) throws ParseException {
		final SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
		final Date date = format.parse(curDate);
		final Calendar calendar = Calendar.getInstance();
		calendar.setTime(date);
		calendar.add(Calendar.DAY_OF_YEAR, 1);
		return format.format(calendar.getTime());
	}

	record GamesStats(
			long gamesWithWhite, long lostWithWhite, double whiteLostPercentage,
			long gamesWithBlack, long lostWithBlack, double blackLostPercentage
	) {
	}

	public record DataPoint(String x, int value, String link) {
	}
}
