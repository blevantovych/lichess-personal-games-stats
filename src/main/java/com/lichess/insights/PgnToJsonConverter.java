package com.lichess.insights;

import java.io.*;
import java.util.*;
import java.util.regex.*;
import org.json.JSONArray;
import org.json.JSONObject;

// This is generated by ChatGPT based on https://github.com/blevantovych/lichess-pgn-to-json/blob/main/convert_pgn_to_json.awk
// not working correctly for moves but work fine for PGN tags
public class PgnToJsonConverter {

	public static void main(String[] args) {

		String pgnFilePath = "/Users/blevantovych/Downloads/insights/game.pgn";
		try {
			String pgnContent = readPgnFile(pgnFilePath);
			JSONObject jsonResult = convertPgnToJson(pgnContent);
			System.out.println(jsonResult.toString(4));  // Pretty print JSON with indentation
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private static String readPgnFile(String filePath) throws IOException {
		StringBuilder pgnContent = new StringBuilder();
		BufferedReader br = new BufferedReader(new FileReader(filePath));
		String line;
		while ((line = br.readLine()) != null) {
			pgnContent.append(line).append("\n");
		}
		br.close();
		return pgnContent.toString();
	}

	private static JSONObject convertPgnToJson(String pgnContent) {
		JSONObject gameJson = new JSONObject();
		JSONArray movesArray = new JSONArray();

		Pattern tagPattern = Pattern.compile("^\\[(\\w+) \"([^\"]+)\"\\]");
		Pattern movePattern = Pattern.compile("(\\d+)\\. (\\S+) \\{ \\[%eval ([^\\]]+)\\] \\[%clk ([^\\]]+)\\] \\} (\\S+)? \\{ \\[%eval ([^\\]]+)\\] \\[%clk ([^\\]]+)\\] \\}");
		Pattern singleMovePattern = Pattern.compile("(\\d+)\\. (\\S+) \\{ \\[%eval ([^\\]]+)\\] \\[%clk ([^\\]]+)\\] \\}");

		Scanner scanner = new Scanner(pgnContent);
		boolean inMoves = false;

		while (scanner.hasNextLine()) {
			String line = scanner.nextLine().trim();

			// Handle tags (metadata)
			Matcher tagMatcher = tagPattern.matcher(line);
			if (tagMatcher.matches()) {
				gameJson.put(tagMatcher.group(1), tagMatcher.group(2));
			}

			// Handle moves with both sides having eval and clock
			Matcher moveMatcher = movePattern.matcher(line);
			if (moveMatcher.find()) {
				for (int i = 1; i <= moveMatcher.groupCount(); i += 8) {
					JSONObject moveWhite = new JSONObject();
					moveWhite.put("m", moveMatcher.group(2));
					moveWhite.put("e", moveMatcher.group(3));
					moveWhite.put("c", moveMatcher.group(4));

					JSONObject moveBlack = new JSONObject();
					moveBlack.put("m", moveMatcher.group(5));
					moveBlack.put("e", moveMatcher.group(6));
					moveBlack.put("c", moveMatcher.group(7));

					movesArray.put(moveWhite);
					movesArray.put(moveBlack);
				}
				inMoves = true;
			}

			// Handle single move lines with eval and clock
			Matcher singleMoveMatcher = singleMovePattern.matcher(line);
			if (singleMoveMatcher.find()) {
				JSONObject moveWhite = new JSONObject();
				moveWhite.put("m", singleMoveMatcher.group(2));
				moveWhite.put("e", singleMoveMatcher.group(3));
				moveWhite.put("c", singleMoveMatcher.group(4));

				movesArray.put(moveWhite);
				inMoves = true;
			}

			// Handle simple moves (without eval and clock)
			if (inMoves && line.matches("^\\d+\\.\\s+.*")) {
				String[] moves = line.split("\\s+");
				for (int i = 1; i < moves.length; i++) {
					JSONObject move = new JSONObject();
					move.put("m", moves[i]);
					movesArray.put(move);
				}
			}
		}

		gameJson.put("moves", movesArray);
		scanner.close();
		return gameJson;
	}
}
